// Mocks generated by Mockito 5.4.0 from annotations
// in soal_app/test/viewmodel/provider/contact_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:soal_app/core/enums/state.dart' as _i7;
import 'package:soal_app/model/contacts_model.dart' as _i3;
import 'package:soal_app/model/helper/database_helper.dart' as _i4;
import 'package:soal_app/viewmodel/provider/contact_provider.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContact_1 extends _i1.SmartFake implements _i3.Contact {
  _FakeContact_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i4.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i2.Database>);
  @override
  _i5.Future<void> insertContact(_i3.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #insertContact,
          [contact],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i3.Contact>> getContacts() => (super.noSuchMethod(
        Invocation.method(
          #getContacts,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Contact>>.value(<_i3.Contact>[]),
      ) as _i5.Future<List<_i3.Contact>>);
  @override
  _i5.Future<_i3.Contact> getContactbyId(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getContactbyId,
          [id],
        ),
        returnValue: _i5.Future<_i3.Contact>.value(_FakeContact_1(
          this,
          Invocation.method(
            #getContactbyId,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Contact>);
  @override
  _i5.Future<void> updateContact(_i3.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #updateContact,
          [contact],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteContact(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ContactProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactProvider extends _i1.Mock implements _i6.ContactProvider {
  MockContactProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ContactViewState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.ContactViewState.none,
      ) as _i7.ContactViewState);
  @override
  set state(_i7.ContactViewState? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.Contact> get contacts => (super.noSuchMethod(
        Invocation.getter(#contacts),
        returnValue: <_i3.Contact>[],
      ) as List<_i3.Contact>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  dynamic changeState(_i7.ContactViewState? s) =>
      super.noSuchMethod(Invocation.method(
        #changeState,
        [s],
      ));
  @override
  _i5.Future<void> addContacts(_i3.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #addContacts,
          [contact],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i3.Contact> getContactsbyId(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getContactsbyId,
          [id],
        ),
        returnValue: _i5.Future<_i3.Contact>.value(_FakeContact_1(
          this,
          Invocation.method(
            #getContactsbyId,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Contact>);
  @override
  void updateContacts(_i3.Contact? contact) => super.noSuchMethod(
        Invocation.method(
          #updateContacts,
          [contact],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> deleteContact(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
